customer_loan_details <- read.csv("D:/cutomer_loan_details.csv", sep = ",")
customer_loan_details <- read.csv(C:\Users\HP\Downloads\loan_prediction_using_PCA_and_naive_bayes_classification_with_R-master (1)\loan_prediction_using_PCA_and_naive_bayes_classification_with_R-master/cutomer_loan_details.csv", sep = ",")
customer_loan_details <- read.csv(C:\Users\HP\Downloads\cutomer_loan_details.csv", sep = ",")
customer_loan_details <- read.csv("E:/cutomer_loan_details.csv", sep = ",")
str(customer_loan_details)
head(customer_loan_details)
customer_loan_details <- read.csv("E:/cutomer_loan_details.csv", sep = ",")
str(customer_loan_details)
head(customer_loan_details)
head(customer_loan_details)
install.packages("caret")
str(customer_loan_details)
str(customer_loan_details)
head(customer_loan_details)
any(is.na(customer_loan_details))
customer_loan_details$dti <- (customer_loan_details$debts/customer_loan_details$income)*100
customer_loan_details$loan_decision_status <- ifelse(customer_loan_details$loan_decision_type == 'Denied', 0, 1)
customer_loan_details$loan_decision_status <- factor(customer_loan_details$loan_decision_status, levels = c(0, 1))
customer_loan_refined <- customer_loan_details[,c(3,4,6:8,11,13:14)]
head(customer_loan_refined)
customer_loan_refined$gender <- as.numeric(factor(customer_loan_refined$gender,
levels = c('Male','Female'),
labels = c(1,2)))
customer_loan_refined$marital_status <- as.numeric(factor(customer_loan_refined$marital_status,
levels = c('Divorced','Married','Single'),
labels = c(1,2,3)))
customer_loan_refined$occupation <- as.numeric(factor(customer_loan_refined$occupation,
levels = c('Accout','Business','IT','Manager','NYPD'),
labels = c(1,2,3,4,5)))
customer_loan_refined$loan_type <- as.numeric(factor(customer_loan_refined$loan_type,
levels = c('Auto','Credit','Home','Personal'),
labels = c(1,2,3,4)))
head(customer_loan_refined)
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(customer_loan_refined$loan_decision_status, SplitRatio = 0.70)
training_set = subset(customer_loan_refined, split == TRUE)
test_set = subset(customer_loan_refined, split == FALSE)
training_set[-8] = scale(training_set[-8])
test_set[-8] = scale(test_set[-8])
head(training_set)
install.packages("caret")
install.packages("caTools")
set.seed(123)
split = sample.split(customer_loan_refined$loan_decision_status, SplitRatio = 0.70)
str(customer_loan_details)
head(customer_loan_details)
any(is.na(customer_loan_details))
customer_loan_details$dti <- (customer_loan_details$debts/customer_loan_details$income)*100
customer_loan_details$dti <- (customer_loan_details$debts/customer_loan_details$income)*100
customer_loan_details$loan_decision_status <- factor(customer_loan_details$loan_decision_status, levels = c(0, 1))
customer_loan_refined <- customer_loan_details[,c(3,4,6:8,11,13:14)]
head(customer_loan_refined)
customer_loan_refined$gender <- as.numeric(factor(customer_loan_refined$gender,
levels = c('Male','Female'),
labels = c(1,2)))
customer_loan_refined$marital_status <- as.numeric(factor(customer_loan_refined$marital_status,
levels = c('Divorced','Married','Single'),
labels = c(1,2,3)))
customer_loan_refined$occupation <- as.numeric(factor(customer_loan_refined$occupation,
levels = c('Accout','Business','IT','Manager','NYPD'),
labels = c(1,2,3,4,5)))
customer_loan_refined$loan_type <- as.numeric(factor(customer_loan_refined$loan_type,
levels = c('Auto','Credit','Home','Personal'),
labels = c(1,2,3,4)))
head(customer_loan_refined)
install.packages("caTools")
install.packages("caTools")
install.packages("caTools")
install.packages("caret")
install.packages("caTools")
install.packages("caret")
install.packages("caTools")
install.packages("caret")
str(customer_loan_details)
head(customer_loan_details)
any(is.na(customer_loan_details))
customer_loan_details$dti <- (customer_loan_details$debts/customer_loan_details$income)*100
customer_loan_details$loan_decision_status <- ifelse(customer_loan_details$loan_decision_type == 'Denied', 0, 1)
customer_loan_details$loan_decision_status <- factor(customer_loan_details$loan_decision_status, levels = c(0, 1))
customer_loan_refined <- customer_loan_details[,c(3,4,6:8,11,13:14)]
head(customer_loan_refined)
customer_loan_refined$gender <- as.numeric(factor(customer_loan_refined$gender,
levels = c('Male','Female'),
labels = c(1,2)))
customer_loan_refined$marital_status <- as.numeric(factor(customer_loan_refined$marital_status,
levels = c('Divorced','Married','Single'),
labels = c(1,2,3)))
customer_loan_refined$occupation <- as.numeric(factor(customer_loan_refined$occupation,
levels = c('Accout','Business','IT','Manager','NYPD'),
labels = c(1,2,3,4,5)))
customer_loan_refined$loan_type <- as.numeric(factor(customer_loan_refined$loan_type,
levels = c('Auto','Credit','Home','Personal'),
labels = c(1,2,3,4)))
head(customer_loan_refined)
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(customer_loan_refined$loan_decision_status, SplitRatio = 0.70)
training_set = subset(customer_loan_refined, split == TRUE)
test_set = subset(customer_loan_refined, split == FALSE)
training_set[-8] = scale(training_set[-8])
test_set[-8] = scale(test_set[-8])
head(training_set)
install.packages("caret")
library(caret)
pca = preProcess(x = training_set[-8], method = 'pca', pcaComp = 2)
training_set_pca = predict(pca, training_set)
pca = preProcess(x = training_set[-8], method = 'pca', pcaComp = 2)
install.packages("e1071")
classifier = naiveBayes(x = training_set_pca[-3], y = training_set_pca$loan_decision_status)
str(customer_loan_details)
head(customer_loan_details)
any(is.na(customer_loan_details))
customer_loan_details$dti <- (customer_loan_details$debts/customer_loan_details$income)*100
customer_loan_details$loan_decision_status <- ifelse(customer_loan_details$loan_decision_type == 'Denied', 0, 1)
customer_loan_details$loan_decision_status <- factor(customer_loan_details$loan_decision_status, levels = c(0, 1))
customer_loan_refined <- customer_loan_details[,c(3,4,6:8,11,13:14)]
head(customer_loan_refined)
customer_loan_refined$gender <- as.numeric(factor(customer_loan_refined$gender,
levels = c('Male','Female'),
labels = c(1,2)))
customer_loan_refined$marital_status <- as.numeric(factor(customer_loan_refined$marital_status,
levels = c('Divorced','Married','Single'),
labels = c(1,2,3)))
customer_loan_refined$occupation <- as.numeric(factor(customer_loan_refined$occupation,
levels = c('Accout','Business','IT','Manager','NYPD'),
labels = c(1,2,3,4,5)))
customer_loan_refined$loan_type <- as.numeric(factor(customer_loan_refined$loan_type,
levels = c('Auto','Credit','Home','Personal'),
labels = c(1,2,3,4)))
head(customer_loan_refined)
install.packages("caTools")
set.seed(123)
split = sample.split(customer_loan_refined$loan_decision_status, SplitRatio = 0.70)
training_set = subset(customer_loan_refined, split == TRUE)
test_set = subset(customer_loan_refined, split == FALSE)
training_set[-8] = scale(training_set[-8])
test_set[-8] = scale(test_set[-8])
head(training_set)
install.packages("caret")
install.packages("caret")
install.packages("e1071")
install.packages("caret")
pca = preProcess(x = training_set[-8], method = 'pca', pcaComp = 2)
training_set_pca = predict(pca, training_set)
install.packages("caret")
install.packages("caret")
training_set_pca = training_set_pca[c(2, 3, 1)]
test_set_pca = predict(pca, test_set)
test_set_pca = test_set_pca[c(2, 3, 1)]
head(test_set_pca)
install.packages("e1071")
classifier = naiveBayes(x = training_set_pca[-3], y = training_set_pca$loan_decision_status)
classifier = naiveBayes(x = training_set_pca[-3], y = training_set_pca$loan_decision_status)
y_pred = predict(classifier, newdata = test_set_pca[-3])
str(customer_loan_details)
head(customer_loan_details)
any(is.na(customer_loan_details))
customer_loan_details$dti <- (customer_loan_details$debts/customer_loan_details$income)*100
customer_loan_details$loan_decision_status <- ifelse(customer_loan_details$loan_decision_type == 'Denied', 0, 1)
customer_loan_details$loan_decision_status <- factor(customer_loan_details$loan_decision_status, levels = c(0, 1))
customer_loan_refined <- customer_loan_details[,c(3,4,6:8,11,13:14)]
head(customer_loan_refined)
customer_loan_refined$gender <- as.numeric(factor(customer_loan_refined$gender,
levels = c('Male','Female'),
labels = c(1,2)))
customer_loan_refined$marital_status <- as.numeric(factor(customer_loan_refined$marital_status,
levels = c('Divorced','Married','Single'),
labels = c(1,2,3)))
customer_loan_refined$occupation <- as.numeric(factor(customer_loan_refined$occupation,
levels = c('Accout','Business','IT','Manager','NYPD'),
labels = c(1,2,3,4,5)))
customer_loan_refined$loan_type <- as.numeric(factor(customer_loan_refined$loan_type,
levels = c('Auto','Credit','Home','Personal'),
labels = c(1,2,3,4)))
head(customer_loan_refined)
install.packages("caTools")
set.seed(123)
split = sample.split(customer_loan_refined$loan_decision_status, SplitRatio = 0.70)
split = sample.split(customer_loan_refined$loan_decision_status, SplitRatio = 0.70)
install.packages("caTools")
set.seed(123)
split = sample.split(customer_loan_refined$loan_decision_status, SplitRatio = 0.70)
training_set = subset(customer_loan_refined, split == TRUE)
test_set = subset(customer_loan_refined, split == FALSE)
training_set[-8] = scale(training_set[-8])
test_set[-8] = scale(test_set[-8])
head(training_set)
install.packages("caret")
install.packages("caret")
library(caret)
pca = preProcess(x = training_set[-8], method = 'pca', pcaComp = 2)
library(e1071)
install.packages("e1071")
classifier = naiveBayes(x = training_set_pca[-3], y = training_set_pca$loan_decision_status)
str(customer_loan_details);
head(customer_loan_details);
any(is.na(customer_loan_details));
customer_loan_details$dti <- (customer_loan_details$debts/customer_loan_details$income)*100;
customer_loan_details$loan_decision_status <- ifelse(customer_loan_details$loan_decision_type == 'Denied', 0, 1);
